/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package adobeairtoexe;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.iharder.dnd.FileDrop;

/**
 *
 * @author Sely
 */
public class JFMain extends javax.swing.JFrame {

    /**
     * Creates new form JFMain
     */
    File fileAir;
    File folderEXE;
    File[] inputFiles;

    public JFMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBConvert = new javax.swing.JButton();
        jTFEXE = new javax.swing.JTextField();
        jTFAdobeAir = new javax.swing.JTextField();
        jBBrowseAirFile = new javax.swing.JButton();
        jCBConvertOnDRagAndDrop = new javax.swing.JCheckBox();
        jBBrowseEXEFolder = new javax.swing.JButton();
        jSPLists = new javax.swing.JScrollPane();
        jLDropedFiles = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adobe Air to EXE");

        jBConvert.setText("Convert");
        jBConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConvertActionPerformed(evt);
            }
        });

        jTFAdobeAir.setDragEnabled(true);
        jTFAdobeAir.setDropMode(javax.swing.DropMode.INSERT);
        jTFAdobeAir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTFAdobeAirMouseReleased(evt);
            }
        });

        jBBrowseAirFile.setText("Browse Adobe Air File");
        jBBrowseAirFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseAirFileActionPerformed(evt);
            }
        });

        jCBConvertOnDRagAndDrop.setText("Convert on Drag and Drop");

        jBBrowseEXEFolder.setText("Browse Output Folder");
        jBBrowseEXEFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseEXEFolderActionPerformed(evt);
            }
        });

        jSPLists.setViewportView(jLDropedFiles);

        jTAStatus.setColumns(20);
        jTAStatus.setRows(5);
        jScrollPane1.setViewportView(jTAStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTFAdobeAir, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jBBrowseAirFile))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTFEXE, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                                .addComponent(jCBConvertOnDRagAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jBBrowseEXEFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSPLists, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFAdobeAir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBrowseAirFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBrowseEXEFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFEXE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBConvertOnDRagAndDrop)
                    .addComponent(jBConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSPLists, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File getFileAir() {
        return fileAir;
    }

    public void setFileAir(File fileAir) {
        this.fileAir = fileAir;
    }

    public File getFolderEXE() {
        return folderEXE;
    }

    public void setFolderEXE(File folderEXE) {
        this.folderEXE = folderEXE;
    }

    public File[] getInputFiles() {
        return inputFiles;
    }

    public void setInputFiles(File[] inputFiles) {
        this.inputFiles = inputFiles;
    }

    public void convertAdobeAirToExe(int from) {
        if (!jTFAdobeAir.getText().trim().equals("") && !jTFEXE.getText().trim().equals("")) {
            Runtime rt = Runtime.getRuntime();
            Process pr = null;
             
            if (from == 0) {
                if (fileAir.getName().endsWith(".air")) {
                    try {
                        String command = "java com.adobe.air.ADT -package -target native \"" + folderEXE.getAbsolutePath() + "\\" + fileAir.getName().replaceAll(".air", ".exe") + "\" \"" + fileAir.getAbsolutePath() + "\"";                        
                        pr = rt.exec(command);
                        
                        System.out.println(command);
                    } catch (IOException e) {
                        jTAStatus.setText("");
                        jTAStatus.setText(e.getMessage()+" "+pr.getErrorStream().toString());
                    }
                } else {
                    JOptionPane.showConfirmDialog(this, fileAir.getAbsoluteFile() + " is not a valid Adobe Air file !", "Adobe Air to Exe", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (from == 1) {


                for (File file : inputFiles) {
                    if (file.getName().endsWith(".air")) {
                        try {
                            String command = "java com.adobe.air.ADT -package -target native \"" + folderEXE.getAbsolutePath() + "\\" + file.getName().replaceAll(".air", ".exe") + "\" \"" + file.getAbsolutePath() + "\"";                            
                            
                            pr = rt.exec(command);
                            System.out.println(command);
                        } catch (IOException e) {
                            jTAStatus.setText("");
                            jTAStatus.setText(e.getMessage()+" "+pr.getErrorStream().toString());
                        }
                    } else {
                        JOptionPane.showConfirmDialog(this, file.getAbsoluteFile() + " is not a valid Adobe Air file !", "Adobe Air to Exe", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    }

                }
            }
        } else {
            JOptionPane.showConfirmDialog(this, "Please Enter required Datas !", "Adobe Air to Exe", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void jBConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConvertActionPerformed
        convertAdobeAirToExe(0);
    }//GEN-LAST:event_jBConvertActionPerformed

    private void jBBrowseAirFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseAirFileActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowseAirFile) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                fileAir = jfc.getSelectedFile();
                jTFAdobeAir.setText(fileAir.getAbsolutePath());
                folderEXE = jfc.getCurrentDirectory();
                jTFEXE.setText(folderEXE.getAbsolutePath());

                DefaultListModel listModel = new DefaultListModel();
                jLDropedFiles.setModel(listModel);

            } else {
                fileAir = null;
            }
        }
    }//GEN-LAST:event_jBBrowseAirFileActionPerformed

    private void jBBrowseEXEFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseEXEFolderActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jBBrowseEXEFolder) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                folderEXE = jfc.getSelectedFile();

                jTFEXE.setText(folderEXE.getAbsolutePath());

            } else {
                folderEXE = null;
            }
        }
    }//GEN-LAST:event_jBBrowseEXEFolderActionPerformed

    private void jTFAdobeAirMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFAdobeAirMouseReleased
        // TODO add your handling code here:
        if (evt.getSource() == jTFAdobeAir) {
        }
    }//GEN-LAST:event_jTFAdobeAirMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                final JFMain jf = new JFMain();
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                jf.setLocation(dim.width / 2 - jf.getSize().width / 2, dim.height / 2 - jf.getSize().height / 2);
                jf.setVisible(true);

                new FileDrop(jf.jTFAdobeAir, new FileDrop.Listener() {
                    public void filesDropped(java.io.File[] files) {
                        DefaultListModel listModel = new DefaultListModel();
                        for (File file : files) {
                            listModel.addElement(file.getAbsoluteFile());
                            System.out.println(file.getAbsoluteFile());
                        }
                        jf.jLDropedFiles.setModel(listModel);

                        if (files != null) {
                            jf.setFileAir(files[0]);
                            jf.jTFAdobeAir.setText(files[0].getAbsolutePath());
                            jf.setFolderEXE(new File(files[0].getParent()));
                            jf.jTFEXE.setText(files[0].getParent());

                        }
                        jf.setInputFiles(files);

                        if (jf.jCBConvertOnDRagAndDrop.isSelected()) {
                            jf.convertAdobeAirToExe(1);
                        }

                    }   // end filesDropped
                }); // end FileDrop.Listener

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBrowseAirFile;
    private javax.swing.JButton jBBrowseEXEFolder;
    private javax.swing.JButton jBConvert;
    private javax.swing.JCheckBox jCBConvertOnDRagAndDrop;
    private javax.swing.JList jLDropedFiles;
    private javax.swing.JScrollPane jSPLists;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAStatus;
    private javax.swing.JTextField jTFAdobeAir;
    private javax.swing.JTextField jTFEXE;
    // End of variables declaration//GEN-END:variables
}
